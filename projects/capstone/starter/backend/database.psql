--
-- PostgreSQL database dump
--

-- Dumped from database version 13.2
-- Dumped by pg_dump version 13.4 (Ubuntu 13.4-1.pgdg20.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: alembic_version; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.alembic_version (
    version_num character varying(32) NOT NULL
);


ALTER TABLE public.alembic_version OWNER TO postgres;

--
-- Name: classroom; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.classroom (
    cls_id integer NOT NULL,
    cls_code character varying(20) NOT NULL,
    cls_size character varying(50) NOT NULL
);


ALTER TABLE public.classroom OWNER TO postgres;

--
-- Name: classroom_cls_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.classroom_cls_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.classroom_cls_id_seq OWNER TO postgres;

--
-- Name: classroom_cls_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.classroom_cls_id_seq OWNED BY public.classroom.cls_id;


--
-- Name: course; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.course (
    crs_id integer NOT NULL,
    crs_code character varying(20) NOT NULL,
    crs_title character varying(50) NOT NULL,
    crs_desc text NOT NULL,
    crs_book character varying(255),
    crs_lec_id integer NOT NULL,
    crs_cls_id integer NOT NULL
);


ALTER TABLE public.course OWNER TO postgres;

--
-- Name: course_crs_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.course_crs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.course_crs_id_seq OWNER TO postgres;

--
-- Name: course_crs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.course_crs_id_seq OWNED BY public.course.crs_id;


--
-- Name: enrollments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.enrollments (
    se_crs_id integer NOT NULL,
    se_std_id integer NOT NULL,
    se_semester character varying(30) NOT NULL
);


ALTER TABLE public.enrollments OWNER TO postgres;

--
-- Name: lecturer; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.lecturer (
    lec_id integer NOT NULL,
    lec_title character varying(20) NOT NULL,
    lec_fname character varying(20) NOT NULL,
    lec_lname character varying(20) NOT NULL,
    lec_email character varying(30) NOT NULL,
    lec_dob character varying(10) NOT NULL,
    lec_gender character varying(10) NOT NULL
);


ALTER TABLE public.lecturer OWNER TO postgres;

--
-- Name: lecturer_lec_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.lecturer_lec_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.lecturer_lec_id_seq OWNER TO postgres;

--
-- Name: lecturer_lec_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.lecturer_lec_id_seq OWNED BY public.lecturer.lec_id;


--
-- Name: student; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.student (
    std_id integer NOT NULL,
    std_regno integer NOT NULL,
    std_fname character varying(20) NOT NULL,
    std_lname character varying(20) NOT NULL,
    std_email character varying(30) NOT NULL,
    std_dob character varying(10) NOT NULL,
    std_gender character varying(10) NOT NULL
);


ALTER TABLE public.student OWNER TO postgres;

--
-- Name: student_std_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.student_std_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.student_std_id_seq OWNER TO postgres;

--
-- Name: student_std_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.student_std_id_seq OWNED BY public.student.std_id;


--
-- Name: classroom cls_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.classroom ALTER COLUMN cls_id SET DEFAULT nextval('public.classroom_cls_id_seq'::regclass);


--
-- Name: course crs_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course ALTER COLUMN crs_id SET DEFAULT nextval('public.course_crs_id_seq'::regclass);


--
-- Name: lecturer lec_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lecturer ALTER COLUMN lec_id SET DEFAULT nextval('public.lecturer_lec_id_seq'::regclass);


--
-- Name: student std_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.student ALTER COLUMN std_id SET DEFAULT nextval('public.student_std_id_seq'::regclass);


--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.alembic_version (version_num) FROM stdin;
eb31d16a6dd1
\.


--
-- Data for Name: classroom; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.classroom (cls_id, cls_code, cls_size) FROM stdin;
1	RM623	13
2	RM167	20
3	RM302	16
\.


--
-- Data for Name: course; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.course (crs_id, crs_code, crs_title, crs_desc, crs_book, crs_lec_id, crs_cls_id) FROM stdin;
1	CIS607	Survey of Predictive Analytical Techniques	This course addresses the foundations of using predictive statistics on big data sets to guide the decision-making process. The focus will be on applied examples using realistic data associated with marketing research and operations. Models implemented include multiple and logistic regression, principle component analysis, factor analysis, propensity score matching, classification, decision trees, and clustering with analytical estimations using spreadsheet software or SPSS.	Cluster Analysis and Data Mining	1	1
2	MIS603 	InformationSsecurity and Risk Management	This course will stress the necessity for establishing an organization-wide information security risk management program designed to isolate significant internal and external cyber and physical access threats though the application of technical security evaluations. In addition, this course will explore the risks associated with using wired and wireless networks, cloud services, remote access to corporate information, as well as an examination of current and future administrative, physical, and technical cyber security safeguards and risk management systems. Contingency, business continuity and disaster recovery planning will be covered along with applicable ethics laws and regulations dealing with security and privacy.	Principles of Information Security	2	2
3	MIS609	Database Management Systems	This course explores the techniques used to design databases and database management systems. Principles for determining proper database management systems used within the corporate environments. Principles for determining database requirements, components and architectures are addressed. Topics include data dictionaries, use of case tools in developing databases, data integrity, security and privacy issues, and the use of SQL programming language. A final project involving the design of an actual corporate database as well as designing corporate reports are required.	Database systems: design, implementation, and management	2	2
4	MBA576	Operations Management	This course focuses on the vital concepts, issues, and techniques for efficient and effective operations to produce goods and services for consumers and/or businesses.  Special emphasis is placed on process improvement, logistics and supply chain management; planning; organizing and managing of resources to accomplish organizational objectives within a variety of business structures. Topics include operations strategy; product and service design; project management; operational planning; return on investment analysis; process design and analysis; capacity planning; lean production systems; purchasing; materials and inventory management, forecasting; quality management and six sigma; and operational analysis and benchmarking.	Operations Management	3	3
49	CIS606	Applied Data Mining and Analysis of Big Data	It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).	Applied data hands on	2	3
52	CIS609	Survey of Predictive analytics	It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).	Applied data hands on	3	1
\.


--
-- Data for Name: enrollments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.enrollments (se_crs_id, se_std_id, se_semester) FROM stdin;
3	1	Fall I
3	1	Spring II
4	2	Fall II
4	3	Spring I
\.


--
-- Data for Name: lecturer; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.lecturer (lec_id, lec_title, lec_fname, lec_lname, lec_email, lec_dob, lec_gender) FROM stdin;
1	Prof	Oscar	Bundi	obundi@gmail.com	08/02/1980	male
2	Dr	Charles	Gardner	charles@gmail.com	05/20/1965	male
3	Dr	Mary	Rhodes	maryrho@outlook.com	11/16/1974	female
\.


--
-- Data for Name: student; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.student (std_id, std_regno, std_fname, std_lname, std_email, std_dob, std_gender) FROM stdin;
1	6783	Betty	Karanja	karanjabet@gmail.com	09/05/1994	female
2	3278	Hawaa	Rashid	haerash@gmail.com	08/22/2000	female
3	8029	Yassir	Athman	ssrmuchai@gmail.com	03/12/1999	male
4	5362	Mustafa	Khamisi	mustafangure@gmail.com	07/25/1991	male
5	7348	Abubakar	Muchai	abubakarhamis@gmail.com	12/20/1988	male
10	2543	Leonard	Hofstead	abmusti@gmail.com	05/06/1997	male
\.


--
-- Name: classroom_cls_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.classroom_cls_id_seq', 3, true);


--
-- Name: course_crs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.course_crs_id_seq', 52, true);


--
-- Name: lecturer_lec_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.lecturer_lec_id_seq', 3, true);


--
-- Name: student_std_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.student_std_id_seq', 10, true);


--
-- Name: alembic_version alembic_version_pkc; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.alembic_version
    ADD CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num);


--
-- Name: classroom classroom_cls_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.classroom
    ADD CONSTRAINT classroom_cls_code_key UNIQUE (cls_code);


--
-- Name: classroom classroom_cls_size_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.classroom
    ADD CONSTRAINT classroom_cls_size_key UNIQUE (cls_size);


--
-- Name: classroom classroom_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.classroom
    ADD CONSTRAINT classroom_pkey PRIMARY KEY (cls_id);


--
-- Name: course course_crs_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_crs_code_key UNIQUE (crs_code);


--
-- Name: course course_crs_title_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_crs_title_key UNIQUE (crs_title);


--
-- Name: course course_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_pkey PRIMARY KEY (crs_id);


--
-- Name: enrollments enrollments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.enrollments
    ADD CONSTRAINT enrollments_pkey PRIMARY KEY (se_std_id, se_crs_id, se_semester);


--
-- Name: lecturer lecturer_lec_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lecturer
    ADD CONSTRAINT lecturer_lec_email_key UNIQUE (lec_email);


--
-- Name: lecturer lecturer_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lecturer
    ADD CONSTRAINT lecturer_pkey PRIMARY KEY (lec_id);


--
-- Name: student student_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.student
    ADD CONSTRAINT student_pkey PRIMARY KEY (std_id);


--
-- Name: student student_std_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.student
    ADD CONSTRAINT student_std_email_key UNIQUE (std_email);


--
-- Name: student student_std_regno_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.student
    ADD CONSTRAINT student_std_regno_key UNIQUE (std_regno);


--
-- Name: course course_crs_cls_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_crs_cls_id_fkey FOREIGN KEY (crs_cls_id) REFERENCES public.classroom(cls_id);


--
-- Name: course course_crs_lec_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.course
    ADD CONSTRAINT course_crs_lec_id_fkey FOREIGN KEY (crs_lec_id) REFERENCES public.lecturer(lec_id);


--
-- Name: enrollments enrollments_se_crs_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.enrollments
    ADD CONSTRAINT enrollments_se_crs_id_fkey FOREIGN KEY (se_crs_id) REFERENCES public.course(crs_id);


--
-- Name: enrollments enrollments_se_std_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.enrollments
    ADD CONSTRAINT enrollments_se_std_id_fkey FOREIGN KEY (se_std_id) REFERENCES public.student(std_id);


--
-- PostgreSQL database dump complete
--

